//
//  OnboardingView.swift
//  App (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/app/views/onboarding-view
//
//  The onboarding view is shown during the first ever launch of the app.
//  We offer a simple way to create one using multiple HeroViews, but don't be
//  afraid to customize it to yur liking.
//

import SharedKit
import SwiftUI
import AnalyticsKit

// MARK: - Models and Enums

enum OnboardingScreen: Int, CaseIterable {
	case welcome
	case motivation
	case tensionAreas
	case timeCommitment
	case reminder
	case moodCheck
	case resetPlan
	case breathingExercise
	case progress
	
	var title: String {
		switch self {
		case .welcome:
			return "Welcome to Your Nervous System Reset"
		case .motivation:
			return "What brings you to NerveSpace today?"
		case .tensionAreas:
			return "Where do you feel the most tension in your body?"
		case .timeCommitment:
			return "How much time can you give yourself each day?"
		case .reminder:
			return "When should we remind you to reset?"
		case .moodCheck:
			return "How are you feeling right now?"
		case .resetPlan:
			return "Here's your personalized 3-day reset path"
		case .breathingExercise:
			return "Let's take your first reset breath"
		case .progress:
			return "You've started something powerful"
		}
	}
	
	var subtitle: String {
		switch self {
		case .welcome:
			return "You're here because you want to feel better — less stressed, more grounded, more you."
		case .motivation:
			return "Choose what you're seeking — this helps us shape your journey."
		case .tensionAreas:
			return "Your body holds what your mind suppresses. Let's listen."
		case .timeCommitment:
			return "We'll build a plan that fits your energy, not the other way around."
		case .reminder:
			return "A gentle nudge can make all the difference."
		case .moodCheck:
			return "We'll come back to this after your first reset."
		case .resetPlan:
			return "Built from your answers to fit your energy and needs."
		case .breathingExercise:
			return "No movement needed — just follow the rhythm."
		case .progress:
			return "You're 1 day in. Your reset plan continues tomorrow."
		}
	}
}

// MARK: - User Selections Models

struct OnboardingSelections {
	var motivation: String = ""
	var tensionAreas: Set<String> = []
	var timeCommitment: String = ""
	var reminderTime: Date = Date()
	var initialMood: Double = 0.5
}

// MARK: - Main Onboarding View

struct OnboardingView: View {
	@StateObject private var viewModel = OnboardingViewModel()
	let onCompletion: () -> Void
	
	var body: some View {
		ZStack {
			Color.baseBlack.ignoresSafeArea()
			
			TabView(selection: $viewModel.currentScreen) {
				WelcomeScreen(viewModel: viewModel)
					.tag(OnboardingScreen.welcome)
				
				MotivationScreen(viewModel: viewModel)
					.tag(OnboardingScreen.motivation)
				
				TensionAreasScreen(viewModel: viewModel)
					.tag(OnboardingScreen.tensionAreas)
				
				TimeCommitmentScreen(viewModel: viewModel)
					.tag(OnboardingScreen.timeCommitment)
				
				ReminderScreen(viewModel: viewModel)
					.tag(OnboardingScreen.reminder)
				
				MoodCheckScreen(viewModel: viewModel)
					.tag(OnboardingScreen.moodCheck)
				
				ResetPlanScreen(viewModel: viewModel)
					.tag(OnboardingScreen.resetPlan)
				
				BreathingExerciseScreen(viewModel: viewModel)
					.tag(OnboardingScreen.breathingExercise)
				
				ProgressScreen(viewModel: viewModel)
					.tag(OnboardingScreen.progress)
			}
			.tabViewStyle(.page(indexDisplayMode: .never))
			.animation(.easeInOut, value: viewModel.currentScreen)
			.interactiveDismissDisabled()  // Prevent dismissal by swipe
			.gesture(DragGesture())  // Disable swipe between pages
		}
		.onChange(of: viewModel.currentScreen) { newScreen in
			if newScreen == .progress {
				onCompletion()
			}
		}
	}
}

// MARK: - View Model

class OnboardingViewModel: ObservableObject {
	@Published var currentScreen: OnboardingScreen = .welcome
	@Published var selections = OnboardingSelections()
	
	func moveToNextScreen() {
		guard let currentIndex = OnboardingScreen.allCases.firstIndex(of: currentScreen),
			  currentIndex < OnboardingScreen.allCases.count - 1 else {
			return
		}
		currentScreen = OnboardingScreen.allCases[currentIndex + 1]
	}
	
	func moveToPreviousScreen() {
		guard let currentIndex = OnboardingScreen.allCases.firstIndex(of: currentScreen),
			  currentIndex > 0 else {
			return
		}
		currentScreen = OnboardingScreen.allCases[currentIndex - 1]
	}
}

// MARK: - Modifier

struct ShowOnboardingViewOnFirstLaunchEverModifier: ViewModifier {
	@AppStorage(Constants.UserDefaults.General.lastAppVersionAppWasOpenedAt)
	private var lastAppVersionAppWasOpenedAt: String = "NONE"
	
	@State private var showOnboarding: Bool = false
	
	func body(content: Content) -> some View {
		Group {
			if showOnboarding {
				OnboardingView {
					withAnimation(.bouncy) {
						showOnboarding = false
						Analytics.capture(.success, id: "onboarding_completed", source: .general)
					}
				}
				.transition(.opacity)
			} else {
				content
					.transition(.opacity)
			}
		}
		.onAppear {
			if isPreview {
				self.showOnboarding = true
			} else {
				self.showOnboarding = lastAppVersionAppWasOpenedAt == "NONE"
				if lastAppVersionAppWasOpenedAt == "NONE" {
					Analytics.capture(.info, id: "onboarding_started", source: .general)
				}
			}
		}
	}
}

#Preview {
	Text("Hello")
		.modifier(ShowOnboardingViewOnFirstLaunchEverModifier())
}
