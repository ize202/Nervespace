//
//  OnboardingView.swift
//  App (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/app/views/onboarding-view
//
//  The onboarding view is shown during the first ever launch of the app.
//  We offer a simple way to create one using multiple HeroViews, but don't be
//  afraid to customize it to yur liking.
//

import SharedKit
import SwiftUI
import AnalyticsKit

// MARK: - Models and Enums

enum OnboardingScreen: Int, CaseIterable {
	case welcome
	case motivation
	case tensionAreas
	case timeCommitment
	case reminder
	case moodCheck
	case resetPlan
	case breathingExercise
	case breathingCompletion
	case progress
	
	var title: String {
		switch self {
		case .welcome:
			return "Welcome to Form"
		case .motivation:
			return "What brings you to Form today?"
		case .tensionAreas:
			return "Where do you feel the most tension in your body?"
		case .timeCommitment:
			return "How much time can you give yourself each day?"
		case .reminder:
			return "When should we remind you to reset?"
		case .moodCheck:
			return "How are you feeling right now?"
		case .resetPlan:
			return "Here's your 4-day reset path"
		case .breathingExercise:
			return "Let's start your first breath reset"
		case .breathingCompletion:
			return "Reset complete."
		case .progress:
			return "You've started something powerful"
		}
	}
	
	var subtitle: String {
		switch self {
		case .welcome:
			return "You're here because you want to feel better, less stressed, more grounded, more you."
		case .motivation:
			return "Choose what you're seeking, this helps us shape your journey."
		case .tensionAreas:
			return "Your body holds what your mind suppresses. Let's listen."
		case .timeCommitment:
			return "We'll build a plan that fits your energy, not the other way around."
		case .reminder:
			return "A gentle nudge can make all the difference."
		case .moodCheck:
			return "Let's take note of how you're feeling right now."
		case .resetPlan:
			return "Built from your answers to fit your energy and needs."
		case .breathingExercise:
			return "No movement needed, just follow the rhythm."
		case .breathingCompletion:
			return "Your body felt that. Just 3 breaths made a difference."
		case .progress:
			return "You're 1 day in. Your reset plan continues tomorrow."
		}
	}
}

// MARK: - User Selections Models

struct OnboardingSelections {
	var motivation: String = ""
	var tensionAreas: Set<String> = []
	var timeCommitment: String = ""
	var workoutFrequency: String = ""
	var reminderTime: Date = Date()
	var initialMood: Double = 0.5
}

// MARK: - Main Onboarding View

struct OnboardingView: View {
	@StateObject private var viewModel = OnboardingViewModel()
	let onCompletion: () -> Void
	
	var body: some View {
		ZStack {
			Color.baseBlack.ignoresSafeArea()
			
			// Replace TabView with ZStack and switch between screens
			ZStack {
				switch viewModel.currentScreen {
				case .welcome:
					WelcomeScreen(viewModel: viewModel)
				case .motivation:
					MotivationScreen(viewModel: viewModel)
				case .tensionAreas:
					TensionAreasScreen(viewModel: viewModel)
				case .timeCommitment:
					TimeCommitmentScreen(viewModel: viewModel)
				case .reminder:
					ReminderScreen(viewModel: viewModel)
				case .moodCheck:
					MoodCheckScreen(viewModel: viewModel)
				case .resetPlan:
					ResetPlanScreen(viewModel: viewModel)
				case .breathingExercise:
					BreathingExerciseScreen(viewModel: viewModel)
				case .breathingCompletion:
					BreathingCompletionScreen(viewModel: viewModel)
				case .progress:
					ProgressScreen(viewModel: viewModel, onCompletion: onCompletion)
				}
			}
			.transition(.asymmetric(
				insertion: .move(edge: .trailing),
				removal: .move(edge: .leading)
			))
			.animation(.easeInOut, value: viewModel.currentScreen)
		}
	}
}

// MARK: - View Model

class OnboardingViewModel: ObservableObject {
	@Published var currentScreen: OnboardingScreen = .welcome
	@Published var selections = OnboardingSelections()
	
	init() {
		// Pre-initialize haptic manager
		_ = HapticManager.shared
		
		// Track start of onboarding
		Analytics.capture(
			.info,
			id: "onboarding_step_1",
			longDescription: "Welcome screen",
			source: .general
		)
	}
	
	func moveToNextScreen() {
		guard let currentIndex = OnboardingScreen.allCases.firstIndex(of: currentScreen),
			  currentIndex < OnboardingScreen.allCases.count - 1 else {
			return
		}
		
		// Save reminder settings when moving from reminder screen
		if currentScreen == .reminder {
			UserDefaults.standard.set(selections.reminderTime, forKey: "workout_reminder_time")
			UserDefaults.standard.set(true, forKey: "workout_reminder_enabled")
		}
		
		currentScreen = OnboardingScreen.allCases[currentIndex + 1]
		
		// Track step number (adding 2 because first step was tracked in init)
		Analytics.capture(
			.info,
			id: "onboarding_step_\(currentIndex + 2)",
			longDescription: "\(currentScreen)",
			source: .general
		)
	}
	
	func moveToPreviousScreen() {
		guard let currentIndex = OnboardingScreen.allCases.firstIndex(of: currentScreen),
			  currentIndex > 0 else {
			return
		}
		
		currentScreen = OnboardingScreen.allCases[currentIndex - 1]
	}
	
	func completeOnboarding() {
		currentScreen = .progress // Ensure we're on the progress screen
		// Any final cleanup or data saving can go here
	}
}

// MARK: - Modifier

struct ShowOnboardingViewOnFirstLaunchEverModifier: ViewModifier {
	@AppStorage(Constants.UserDefaults.General.lastAppVersionAppWasOpenedAt)
	private var lastAppVersionAppWasOpenedAt: String = "NONE"
	
	@State private var showOnboarding: Bool = false
	
	func body(content: Content) -> some View {
		Group {
			if showOnboarding {
				OnboardingView {
					withAnimation(.bouncy) {
						showOnboarding = false
						lastAppVersionAppWasOpenedAt = Constants.AppData.appVersion
						Analytics.capture(
							.success,
							id: "onboarding_completed",
							longDescription: "Completed onboarding",
							source: .general
						)
					}
				}
				.transition(.opacity)
			} else {
				content
					.transition(.opacity)
			}
		}
		.onAppear {
			if isPreview {
				self.showOnboarding = true
			} else {
				self.showOnboarding = lastAppVersionAppWasOpenedAt == "NONE"
				if lastAppVersionAppWasOpenedAt == "NONE" {
					Analytics.capture(
						.info,
						id: "onboarding_started",
						longDescription: "Started onboarding",
						source: .general
					)
				}
			}
		}
	}
}


#Preview {
	Text("Hello")
		.modifier(ShowOnboardingViewOnFirstLaunchEverModifier())
}
