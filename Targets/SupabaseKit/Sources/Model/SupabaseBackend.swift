//
//  SupabaseBackend.swift
//  SupabaseKit (Generated by SwiftyLaunch 1.5.0)
//  https://docs.swiftylaun.ch/module/authkit
//  https://docs.swiftylaun.ch/module/databasekit
//

import AuthenticationServices
import Foundation
import SharedKit
import Supabase
import SwiftUI

/// Enum representing authentication states.
public enum AuthState {
	case signedOut
	case signedIn
}

@MainActor
public class DB: ObservableObject {
	/// Variable reference to access Supabase.
	internal let _db: SupabaseClient
	
	/// Exercise service for handling exercise-related operations
	public private(set) lazy var exerciseService: ExerciseService = {
		SupabaseExerciseService(client: _db)
	}()
	
	/// Routine service for handling routine-related operations
	public private(set) lazy var routineService: RoutineService = {
		SupabaseRoutineService(client: _db)
	}()
	
	/// Plan service for handling plan-related operations
	public private(set) lazy var planService: PlanService = {
		SupabasePlanService(client: _db)
	}()
	
	/// User service for handling user-related operations
	public private(set) lazy var userService: UserService = {
		SupabaseUserService(client: _db)
	}()
	
	/// SupabaseAuth user state, nil if not logged in
	@Published public var currentUser: User? = nil
	
	/// SupabaseAuth State (use this to check auth state, updates with currentUser)
	@Published public var authState: AuthState = .signedOut
	
	/// For Supabase to keep track of the Auth State (see AuthGeneral.swift)
	internal var authStateHandler: AuthStateChangeListenerRegistration?
	
	/// For Sign in With Apple (Specifically, for account deletion. Is set when the user signs in with Apple)
	internal var appleIDCredential: ASAuthorizationAppleIDCredential?
	
	/// For Sign in With Apple (see SignInWithApple.siwft)
	internal var currentNonce: String?
	
	///- Parameter onAuthStateChange: Additional closure to pass to the AuthState Listener.
	/// We use this to set all the different providers to use the same, supabase-issued user ID to identify the user.
	public init(
		onAuthStateChange: @escaping (AuthChangeEvent, Session?) -> Void = { _, _ in }
	) {
		#if DEBUG
		let urlKey = "SUPABASE_DEV_URL"
		let apiKeyKey = "SUPABASE_DEV_KEY"
		print("[DB] Using development database")
		#else
		let urlKey = "SUPABASE_URL"
		let apiKeyKey = "SUPABASE_KEY"
		print("[DB] Using production database")
		#endif
		
		let supabaseURLString = try? getPlistEntry(urlKey, in: "Supabase-Info")
		let apiKey = try? getPlistEntry(apiKeyKey, in: "Supabase-Info")
		
		guard let apiKey, let supabaseURLString, let supabaseURL = URL(string: supabaseURLString) else {
			fatalError("ERROR: Couldn't get SupabaseURL and API Keys in Supabase-Info.plist!")
		}
		
		_db = SupabaseClient(
			supabaseURL: supabaseURL,
			supabaseKey: apiKey
		)
		
		Task {
			await registerAuthStateListener(additionalHandler: onAuthStateChange)
		}
	}
}
